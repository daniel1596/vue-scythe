{"remainingRequest":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\ts-loader\\index.js??ref--13-1!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue","mtime":1539182526881},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538786880309},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538786880309},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport { Component, Vue } from \"vue-property-decorator\";\r\nimport LandTile from \"./Tile\";\r\nimport TileColor from \"./TileColor\";\r\nlet GameBoard = class GameBoard extends Vue {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.width = 400; // want to go ahead and make these as attributes of Vue instance/class\r\n        this.height = 600;\r\n        this.radius = 30;\r\n        this.gapBetweenHexesX = Math.sqrt(3) * this.radius / 2;\r\n        this.gapBetweenHexesY = 3 * this.radius / 2;\r\n        this.factoryOffset = 80; // factory starts at (80, 80) on the canvas\r\n        // to make things more readable - use an enum for something like Direction.LEFT, \r\n        //  Direction.TOP_LEFT, TOP_RIGHT, RIGHT, etc.\r\n        // enums in TypeScript: https://www.typescriptlang.org/docs/handbook/enums.html\r\n    }\r\n    drawLine(x, y) {\r\n        this.context.lineTo(this.factoryOffset + x, this.factoryOffset + y);\r\n    }\r\n    moveToTopCorner(x, y) {\r\n        this.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\r\n    }\r\n    // Note - want to outsource the code to set up the initial game board to something else. (What?)\r\n    drawHex(x, y, fillColor) {\r\n        // doc - https://github.com/rrreese/Hexagon.js/blob/master/hexagon.js\\\r\n        // and math here - http://blog.ruslans.com/2011/02/hexagonal-grid-math.html - though I don't want to use \"side\"\r\n        let height = Math.sqrt(3) * this.radius;\r\n        let width = 2 * this.radius;\r\n        this.context.strokeStyle = \"#000\"; // make this programmatic later\r\n        this.context.beginPath();\r\n        // Since the Canvas itself starts at (0,0) in the top left corner.\r\n        // but I want the factory to be (0,0)... wahh.\r\n        //this.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\r\n        this.moveToTopCorner(x, y);\r\n        this.drawLine(x + Math.sqrt(3) * this.radius / 2, y - this.radius / 2);\r\n        this.drawLine(x + Math.sqrt(3) * this.radius / 2, y + this.radius / 2);\r\n        this.drawLine(x, y + this.radius);\r\n        this.drawLine(x - Math.sqrt(3) * this.radius / 2, y + this.radius / 2);\r\n        this.drawLine(x - Math.sqrt(3) * this.radius / 2, y - this.radius / 2);\r\n        if (fillColor) {\r\n            this.context.fillStyle = fillColor;\r\n            this.context.fill();\r\n        }\r\n        this.context.closePath(); // this closes the \"shape\" of the hexagon, adding the last side - not sure I'll actually use this\r\n        this.context.stroke(); // this actually draws the lines\r\n    }\r\n    mounted() {\r\n        this.canvas = document.getElementById(\"gameBoardCanvas\");\r\n        this.context = this.canvas.getContext('2d');\r\n        // main game loop - while 1, essentially\r\n        this.drawHexesInitial();\r\n    }\r\n    drawHexesInitial() {\r\n        let x = new LandTile(0, 0); // TODO: this doesn't actually do anything yet\r\n        // But one day, we should be putting the \"draw hex\" logic inside the tiles themselves\r\n        // And the \"drawHex\" method should possibly go inside the HexagonTile interface\r\n        this.drawHex(0, 0, TileColor.SILVER);\r\n        this.drawHex(0 - (Math.sqrt(3) * this.radius / 2), 0 - (3 * this.radius / 2));\r\n        this.drawHex(0 + (Math.sqrt(3) * this.radius / 2), 0 - (3 * this.radius / 2));\r\n        this.drawHex(0 + (Math.sqrt(3) * this.radius), 0, TileColor.SILVER);\r\n        this.drawHex(0 + (Math.sqrt(3) * this.radius / 2), 0 + (3 * this.radius / 2));\r\n        this.drawHex(0 - (Math.sqrt(3) * this.radius / 2), 0 + (3 * this.radius / 2));\r\n        this.drawHex(0 - (Math.sqrt(3) * this.radius), 0, TileColor.SILVER);\r\n    }\r\n};\r\nGameBoard = tslib_1.__decorate([\r\n    Component\r\n], GameBoard);\r\nexport default GameBoard;\r\n",{"version":3,"file":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue.ts","sourceRoot":"","sources":["C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";AASA,OAAO,EAAE,SAAS,EAAQ,GAAG,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,QAAQ,MAAM,QAAQ,CAAA;AAC7B,OAAO,SAAS,MAAM,aAAa,CAAA;AAGnC,IAAqB,SAAS,GAA9B,MAAqB,SAAU,SAAQ,GAAG;IAD1C;;QAEC,UAAK,GAAW,GAAG,CAAC,CAAC,sEAAsE;QAC3F,WAAM,GAAW,GAAG,CAAC;QACrB,WAAM,GAAW,EAAE,CAAC;QACpB,qBAAgB,GAAW,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAA;QACrD,qBAAgB,GAAW,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAA;QAC1C,kBAAa,GAAW,EAAE,CAAC,CAAC,2CAA2C;QAiEvE,iFAAiF;QACjF,8CAA8C;QAC7C,+EAA+E;IACjF,CAAC;IAhEA,QAAQ,CAAC,CAAS,EAAE,CAAS;QAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,eAAe,CAAC,CAAS,EAAE,CAAS;QACnC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IACnF,CAAC;IAEA,gGAAgG;IACjG,OAAO,CAAC,CAAS,EAAE,CAAS,EAAE,SAAkB;QAC/C,sEAAsE;QACtE,+GAA+G;QAC/G,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAE5B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,+BAA+B;QAClE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QAEzB,kEAAkE;QAClE,8CAA8C;QAE9C,oFAAoF;QACpF,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;QAEjE,IAAI,SAAS,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,SAAS,GAAI,SAAS,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;SACpB;QAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,iGAAiG;QAC3H,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,gCAAgC;IACxD,CAAC;IAGA,OAAO;QACP,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,wCAAwC;QAE1C,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACxB,CAAC;IAED,gBAAgB;QAChB,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,8CAA8C;QAC1E,qFAAqF;QACrF,+EAA+E;QAE/E,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QAClE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;CAKD,CAAA;AA1EoB,SAAS;IAD7B,SAAS;GACW,SAAS,CA0E7B;eA1EoB,SAAS","sourcesContent":["\n\n\n\n\n\n\n\n\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport LandTile from \"./Tile\"\nimport TileColor from \"./TileColor\"\n\n@Component\nexport default class GameBoard extends Vue {\n\twidth: number = 400; // want to go ahead and make these as attributes of Vue instance/class\n\theight: number = 600;\n\tradius: number = 30;\n\tgapBetweenHexesX: number = Math.sqrt(3)*this.radius/2 \n\tgapBetweenHexesY: number = 3*this.radius/2\n\tfactoryOffset: number = 80; // factory starts at (80, 80) on the canvas\n\tcanvas: any; // defined in mounted() because otherwise this value will be null\n\tcontext: any;\n\t\n\tdrawLine(x: number, y: number) {\n\t\tthis.context.lineTo(this.factoryOffset + x, this.factoryOffset + y);\n\t}\n\n\tmoveToTopCorner(x: number, y: number) {\n\t\tthis.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t}\n\n  // Note - want to outsource the code to set up the initial game board to something else. (What?)\n\tdrawHex(x: number, y: number, fillColor?: string) {\n\t\t// doc - https://github.com/rrreese/Hexagon.js/blob/master/hexagon.js\\\n\t\t// and math here - http://blog.ruslans.com/2011/02/hexagonal-grid-math.html - though I don't want to use \"side\"\n\t\tlet height = Math.sqrt(3) * this.radius;\n\t\tlet width = 2 * this.radius;\n\t\t\n\t\tthis.context.strokeStyle = \"#000\"; // make this programmatic later\n\t\tthis.context.beginPath();\n\n\t\t// Since the Canvas itself starts at (0,0) in the top left corner.\n\t\t// but I want the factory to be (0,0)... wahh.\n\t\t\n\t\t//this.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t\tthis.moveToTopCorner(x, y);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x, y + this.radius);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\t\n\t\tif (fillColor) {\n\t\t\tthis.context.fillStyle =  fillColor;\n\t\t\tthis.context.fill();\n\t\t}\n\t\t\n\t\tthis.context.closePath(); // this closes the \"shape\" of the hexagon, adding the last side - not sure I'll actually use this\n\t\tthis.context.stroke(); // this actually draws the lines\n\t}\n  \n  \n  mounted() {\n\t\tthis.canvas = document.getElementById(\"gameBoardCanvas\");\n\t\tthis.context = this.canvas.getContext('2d');\n    // main game loop - while 1, essentially\n\t\n\t\tthis.drawHexesInitial();\n  }\n  \n  drawHexesInitial() {\n\t\tlet x = new LandTile(0, 0); // TODO: this doesn't actually do anything yet\n\t\t// But one day, we should be putting the \"draw hex\" logic inside the tiles themselves\n\t\t// And the \"drawHex\" method should possibly go inside the HexagonTile interface\n\n\t\tthis.drawHex(0, 0, TileColor.SILVER);\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t}\n  \n\t// to make things more readable - use an enum for something like Direction.LEFT, \n\t//  Direction.TOP_LEFT, TOP_RIGHT, RIGHT, etc.\n  // enums in TypeScript: https://www.typescriptlang.org/docs/handbook/enums.html\n}\n"]}]}
{"remainingRequest":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\src\\components\\GameBoard.vue","mtime":1539182526881},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538786880309},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538786880309},{"path":"C:\\Users\\pkdan_000\\Documents\\JS practice\\vue-scythe\\trunk\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport LandTile from \"./Tile\"\nimport TileColor from \"./TileColor\"\n\n@Component\nexport default class GameBoard extends Vue {\n\twidth: number = 400; // want to go ahead and make these as attributes of Vue instance/class\n\theight: number = 600;\n\tradius: number = 30;\n\tgapBetweenHexesX: number = Math.sqrt(3)*this.radius/2 \n\tgapBetweenHexesY: number = 3*this.radius/2\n\tfactoryOffset: number = 80; // factory starts at (80, 80) on the canvas\n\tcanvas: any; // defined in mounted() because otherwise this value will be null\n\tcontext: any;\n\t\n\tdrawLine(x: number, y: number) {\n\t\tthis.context.lineTo(this.factoryOffset + x, this.factoryOffset + y);\n\t}\n\n\tmoveToTopCorner(x: number, y: number) {\n\t\tthis.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t}\n\n  // Note - want to outsource the code to set up the initial game board to something else. (What?)\n\tdrawHex(x: number, y: number, fillColor?: string) {\n\t\t// doc - https://github.com/rrreese/Hexagon.js/blob/master/hexagon.js\\\n\t\t// and math here - http://blog.ruslans.com/2011/02/hexagonal-grid-math.html - though I don't want to use \"side\"\n\t\tlet height = Math.sqrt(3) * this.radius;\n\t\tlet width = 2 * this.radius;\n\t\t\n\t\tthis.context.strokeStyle = \"#000\"; // make this programmatic later\n\t\tthis.context.beginPath();\n\n\t\t// Since the Canvas itself starts at (0,0) in the top left corner.\n\t\t// but I want the factory to be (0,0)... wahh.\n\t\t\n\t\t//this.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t\tthis.moveToTopCorner(x, y);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x, y + this.radius);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\t\n\t\tif (fillColor) {\n\t\t\tthis.context.fillStyle =  fillColor;\n\t\t\tthis.context.fill();\n\t\t}\n\t\t\n\t\tthis.context.closePath(); // this closes the \"shape\" of the hexagon, adding the last side - not sure I'll actually use this\n\t\tthis.context.stroke(); // this actually draws the lines\n\t}\n  \n  \n  mounted() {\n\t\tthis.canvas = document.getElementById(\"gameBoardCanvas\");\n\t\tthis.context = this.canvas.getContext('2d');\n    // main game loop - while 1, essentially\n\t\n\t\tthis.drawHexesInitial();\n  }\n  \n  drawHexesInitial() {\n\t\tlet x = new LandTile(0, 0); // TODO: this doesn't actually do anything yet\n\t\t// But one day, we should be putting the \"draw hex\" logic inside the tiles themselves\n\t\t// And the \"drawHex\" method should possibly go inside the HexagonTile interface\n\n\t\tthis.drawHex(0, 0, TileColor.SILVER);\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t}\n  \n\t// to make things more readable - use an enum for something like Direction.LEFT, \n\t//  Direction.TOP_LEFT, TOP_RIGHT, RIGHT, etc.\n  // enums in TypeScript: https://www.typescriptlang.org/docs/handbook/enums.html\n}\n",{"version":3,"sources":["GameBoard.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"GameBoard.vue","sourceRoot":"src\\components","sourcesContent":["<template>\n  <div> <!-- root element - there can be only one per component -->\n    <div>\n      <canvas id=\"gameBoardCanvas\" :width=\"width\" :height=\"height\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\nimport LandTile from \"./Tile\"\nimport TileColor from \"./TileColor\"\n\n@Component\nexport default class GameBoard extends Vue {\n\twidth: number = 400; // want to go ahead and make these as attributes of Vue instance/class\n\theight: number = 600;\n\tradius: number = 30;\n\tgapBetweenHexesX: number = Math.sqrt(3)*this.radius/2 \n\tgapBetweenHexesY: number = 3*this.radius/2\n\tfactoryOffset: number = 80; // factory starts at (80, 80) on the canvas\n\tcanvas: any; // defined in mounted() because otherwise this value will be null\n\tcontext: any;\n\t\n\tdrawLine(x: number, y: number) {\n\t\tthis.context.lineTo(this.factoryOffset + x, this.factoryOffset + y);\n\t}\n\n\tmoveToTopCorner(x: number, y: number) {\n\t\tthis.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t}\n\n  // Note - want to outsource the code to set up the initial game board to something else. (What?)\n\tdrawHex(x: number, y: number, fillColor?: string) {\n\t\t// doc - https://github.com/rrreese/Hexagon.js/blob/master/hexagon.js\\\n\t\t// and math here - http://blog.ruslans.com/2011/02/hexagonal-grid-math.html - though I don't want to use \"side\"\n\t\tlet height = Math.sqrt(3) * this.radius;\n\t\tlet width = 2 * this.radius;\n\t\t\n\t\tthis.context.strokeStyle = \"#000\"; // make this programmatic later\n\t\tthis.context.beginPath();\n\n\t\t// Since the Canvas itself starts at (0,0) in the top left corner.\n\t\t// but I want the factory to be (0,0)... wahh.\n\t\t\n\t\t//this.context.moveTo(this.factoryOffset + x, this.factoryOffset + y - this.radius);\n\t\tthis.moveToTopCorner(x, y);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\tthis.drawLine(x + Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x, y + this.radius);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y + this.radius/2);\n\t\tthis.drawLine(x - Math.sqrt(3)*this.radius/2, y - this.radius/2);\n\t\t\n\t\tif (fillColor) {\n\t\t\tthis.context.fillStyle =  fillColor;\n\t\t\tthis.context.fill();\n\t\t}\n\t\t\n\t\tthis.context.closePath(); // this closes the \"shape\" of the hexagon, adding the last side - not sure I'll actually use this\n\t\tthis.context.stroke(); // this actually draws the lines\n\t}\n  \n  \n  mounted() {\n\t\tthis.canvas = document.getElementById(\"gameBoardCanvas\");\n\t\tthis.context = this.canvas.getContext('2d');\n    // main game loop - while 1, essentially\n\t\n\t\tthis.drawHexesInitial();\n  }\n  \n  drawHexesInitial() {\n\t\tlet x = new LandTile(0, 0); // TODO: this doesn't actually do anything yet\n\t\t// But one day, we should be putting the \"draw hex\" logic inside the tiles themselves\n\t\t// And the \"drawHex\" method should possibly go inside the HexagonTile interface\n\n\t\tthis.drawHex(0, 0, TileColor.SILVER);\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0-(3*this.radius/2));\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t\tthis.drawHex(0 + (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius/2), 0+(3*this.radius/2));\n\t\tthis.drawHex(0 - (Math.sqrt(3)*this.radius), 0, TileColor.SILVER);\n\t}\n  \n\t// to make things more readable - use an enum for something like Direction.LEFT, \n\t//  Direction.TOP_LEFT, TOP_RIGHT, RIGHT, etc.\n  // enums in TypeScript: https://www.typescriptlang.org/docs/handbook/enums.html\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\">\n</style>\n"]}]}